{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CSSE3010 Documentation Guides Git Guide Virtual Machine Linux Setup Installation Blinky","title":"Home"},{"location":"#csse3010_documentation","text":"","title":"CSSE3010 Documentation"},{"location":"#guides","text":"Git Guide Virtual Machine Linux Setup Installation Blinky","title":"Guides"},{"location":"code/code/","text":"","title":"Code"},{"location":"datasheet/datasheet/","text":"","title":"Datasheet"},{"location":"getting_started/blinky/","text":"Compiling your first app Getting Started Navigate to sourcelib -> examples -> getting-started -> blink Select your platform here, for most people this will be nucleo-f429. If you are an external student, you may have one of the other boards, check it carefully. Compiling Inside the platform folder, there should be a file called main.c and a file called Makefile . Execute the command: make All the c files should now start building, when it finishes, there will be a main.bin file, main.elf file, main.hex file, and main.o file, as well as an obj directory. Flashing Code Now we are ready to flash, navigate back to the getting started, blinky makefile and execute make flash Accept any popups, the flasher will now cycle through the Compare, Erase, Program, Verify steps, after which the LED's on the Nucleo should start blinking. Tips and Troubleshooting make clean cleans the compiled binaries, this is not always necessary when recompiling code, since not everything needs to be recompiled, however it is useful when a lot of changes have been made. make -j makes compiling faster by using all allocated cpu cores, note that when using a VM to make full use of this you would need to allocate more CPU cores in the VM settings if make complains about a .depend target, you open the makefile and change include .depend to -include .depend","title":"Blinky"},{"location":"getting_started/blinky/#compiling_your_first_app","text":"","title":"Compiling your first app"},{"location":"getting_started/blinky/#getting_started","text":"Navigate to sourcelib -> examples -> getting-started -> blink Select your platform here, for most people this will be nucleo-f429. If you are an external student, you may have one of the other boards, check it carefully.","title":"Getting Started"},{"location":"getting_started/blinky/#compiling","text":"Inside the platform folder, there should be a file called main.c and a file called Makefile . Execute the command: make All the c files should now start building, when it finishes, there will be a main.bin file, main.elf file, main.hex file, and main.o file, as well as an obj directory.","title":"Compiling"},{"location":"getting_started/blinky/#flashing_code","text":"Now we are ready to flash, navigate back to the getting started, blinky makefile and execute make flash Accept any popups, the flasher will now cycle through the Compare, Erase, Program, Verify steps, after which the LED's on the Nucleo should start blinking.","title":"Flashing Code"},{"location":"getting_started/blinky/#tips_and_troubleshooting","text":"make clean cleans the compiled binaries, this is not always necessary when recompiling code, since not everything needs to be recompiled, however it is useful when a lot of changes have been made. make -j makes compiling faster by using all allocated cpu cores, note that when using a VM to make full use of this you would need to allocate more CPU cores in the VM settings if make complains about a .depend target, you open the makefile and change include .depend to -include .depend","title":"Tips and Troubleshooting"},{"location":"git/git/","text":"CSSE3010 Git Guide Note this guide is for Linux, OSX and Windows. You will find Windows specific instructions, below. Use Git to manage your development. Benefit: Git is an distributed repository that you can use to keep track of your current code history and use for backup purposes. You can check in changes when you need to, not just when you are connected to the Internet. This means that your git history will be more like a \u201cworkbook\u201d or diary of your progress. There are 2 repositories you will need for this course 'sourcelib' - this contains all the necessary drivers needed to compile your code, as well as programming examples, Makefiles, compiling tools, flashing tools, and debugging tools. This repository is public, available to everyone, you will only be pulling from this repository. You can find the repository here https://github.com/uqembeddedsys/sourcelib , you will clone it further on in this guide. 'repo' - This is where you will commit your code, any libraries you develop, stage code, and project code goes here. This document contains instructions on the following procedures: Setting up your git account Initialising the repository locally (Do this the first time only) Public Key Generation (For automatic authentication) Cloning your online repository Adding a .gitignore file (Do this once only) Committing changes (Each time an element of work is done) Synchronizing your local repository with the online repository (after each stage/project) Summary Using the Git Command Line Interface (CLI) Troubleshooting Task 1: Setting up your git account Access to your gitea account is via your UQ login, using single sign on (SSO). Browse CSSE3010 gitea using the URL: https://csse3010-gitea.uqcloud.net/ . Once logged in, you will see one empty 'repo' repository under your student number. Figure 1: Logging into CSSE3010 Gitea for the first time This is your repo, all the code you write will be pushed here, all testing from projects and stages will be done by pulling from this repo. Task 2: Public Key Generation via Command Line (Linux) You will need to generate a public and private key pair. The public key will need to be uploaded to your Gitea account. This will allow your local git to be automatically authenticated to your online git account. Open a terminal (in your VM, if used) and type the following commands: Generate key pair: ssh-keygen Add the key to the ssh-agent ssh-add ~/.ssh/id_rsa Display public key generated above: cat ~/.ssh/id_rsa.pub NOTE: press <enter> when asked for file location and pass-phrase. If you get asked if you want to overwrite the previous key, say 'yes'. You now need to link the public ssh key to your gitea account. Open gitea in your browser and navigate: Profile and Settings (Top Right Button) -> Settings -> SSH / GPG Keys -> Manage SSH Keys -> Add Key The url for the SSH settings should be https://csse3010-gitea.uqcloud.net/user/settings/keys Copy the contents of cat ~/.ssh/id_rsa.pub into the \"Content\" section. NOTE: For VirtualBox users, make sure \u201cclipboard, bidirectional\u201d is enabled, this will help you copy+paste things between your Host OS and VM. Public Key Generation for Windows Install putty Follow the steps on this guide Task 3: Git Configuration You will need to initialize your git configuration and set up your global user name and user email. This is required to ensure that you can commit to your local repository. Open a terminal (in your VM, if used) and execute the following commands: git config --global user.name \"<MY.NAME>\" git config --global user.email MY.EMAIL@student.uq.edu.au NOTE: <MY.NAME> eg. \u201cjoe student\u201d. user.name is the name that will come up under your commit logs, user.email will link your git agent to your git-ea account. Task 4: Cloning Sourcelib Execute the following commands: - Change into home directory: cd ~ - Create a folder called csse3010: mkdir csse3010 - Change into your csse3010 directory: cd ~/csse3010 - Clone the remote sourcelib repository into your csse3010 folder. This will automatically create a folder called sourcelib: git clone https://github.com/uqembeddedsys/sourcelib.git Figure 2: Git URL for cloning sourcelib Task 5: Cloning Repo Navigate to 'repo' in gitea, select 'SSH', and copy the ssh url Figure 3: Git URL for cloning repo cd ~/csse3010 git clone <copied url> e.g. git@csse3010-gitea.zones.eait.uq.edu.au:12345678/repo.git There should now be 2 folders in ~/csse3010 , repo and sourcelib . You have now completed your local repository setup. You can now use git to commit your files. Note that committing files only stores files locally. It DOES NOT synchronise your local Git repository with your online repository. When using git, you can graphically see the current history by running gitg. NOTE: If you are working from home, you MUST be connected to the UQ VPN to be able to use git remotely, see the UQ VPN Guide NOTE: There WILL be updates to sourcelib throughout the semester, make sure you keep it up to date by cd ~/csse3010/sourcelib git fetch git pull , do this often. NOTE: there are two labels in your gitg window, a master branch and a origin/master branch. The master branch is on your local repository, and all branches prefixed with origin/ are on the remote server (CSSE3010 gitea). NOTE: You will only commit files to the repo repository. Task 6: Staging and Pushing Files Under normal development, you can use git to stage files, and commit them to your repository. Make a commit now by updating the README.md file in your repo , if there is no README.md file, you can create one with touch README.md . Open the file with a text editor. e.g. code README.md , change the title to <Student#> 3010 Repo , e.g. 42345678 3010 Repo , save the file and close it. Open a terminal in the repo folder. git status git add README.md git commit -m\"updated README\" git push -u origin master Figure 4: git commit example Doing a git commit will create a commit in your local repository. Doing a git push will push the commit to your remote repository on gitea. You can do several git commits before doing a git push, if you so wish. Figure 5 shows the revised history after this commit. Figure 5: gitg commit history Summary of Important Commands check curret repo status git status view history: gitg commit files: git add , git commit To get the latest changes from the online repository: git fetch , git pull To push all your local commits to the online repository: git push (or git push -u origin master if pushing for the first time to an empty remote repository) If you are recovering from a HDD failure, use the commands in the original guide git clone <URL> Other tips Commit changes regularly. You will be required to put your changes into the online Gitea (AT LEAST) after each assessment, every session, including stage, project, etc. Troubleshooting Error: \"Could not resolve hostname https://csse3010-gitea.uqcloud.net/ : No address associated with host\" This URL should have been copied directly from the gitea web interface. Typing this manually has the potential to cause typos to exist. This problem may be caused by your VM not being connected to the Internet. - Make sure your computer (the \u201chost\u201d) is connected to the Internet. - Make sure you are connected to UQ VPN - Reboot your VM. - ping 8.8.8.8 - make sure you are getting packets - ping github.com - make sure DNS works ( fix ) - ssh-add -l check the ssh-key is listed in the ssh-agent, also check the fingerprint of the key matches the fingerprint in gitea - If all else fails, prepend GIT_SSH_COMMAND=\"ssh -vv\" before the git command, e.g. GIT_SSH_COMMAND=\"ssh -vv\" git clone -v git@csse3010-gitea.zones.eait.uq.edu.au:41234567/repo.git , then paste the output in Ed. Error: Unable to do a git pull \"Your local changes to the following files would be overwritten by merge: Please, commit your changes or stash them before you can merge. Aborting\" Reset your git and completely overwrite your local changes - NOTE: ALL YOUR CHANGES WILL BE DELETED AND REPLACED BY THE ONLINE GIT FILES. Run the following commands: git reset HEAD --hard git pull Alternatively git stash git pull git stash pop <fix any merge conflicts> git commit","title":"Git"},{"location":"git/git/#csse3010_git_guide","text":"Note this guide is for Linux, OSX and Windows. You will find Windows specific instructions, below. Use Git to manage your development. Benefit: Git is an distributed repository that you can use to keep track of your current code history and use for backup purposes. You can check in changes when you need to, not just when you are connected to the Internet. This means that your git history will be more like a \u201cworkbook\u201d or diary of your progress. There are 2 repositories you will need for this course 'sourcelib' - this contains all the necessary drivers needed to compile your code, as well as programming examples, Makefiles, compiling tools, flashing tools, and debugging tools. This repository is public, available to everyone, you will only be pulling from this repository. You can find the repository here https://github.com/uqembeddedsys/sourcelib , you will clone it further on in this guide. 'repo' - This is where you will commit your code, any libraries you develop, stage code, and project code goes here. This document contains instructions on the following procedures: Setting up your git account Initialising the repository locally (Do this the first time only) Public Key Generation (For automatic authentication) Cloning your online repository Adding a .gitignore file (Do this once only) Committing changes (Each time an element of work is done) Synchronizing your local repository with the online repository (after each stage/project) Summary Using the Git Command Line Interface (CLI) Troubleshooting","title":"CSSE3010 Git Guide"},{"location":"git/git/#task_1_setting_up_your_git_account","text":"Access to your gitea account is via your UQ login, using single sign on (SSO). Browse CSSE3010 gitea using the URL: https://csse3010-gitea.uqcloud.net/ . Once logged in, you will see one empty 'repo' repository under your student number. Figure 1: Logging into CSSE3010 Gitea for the first time This is your repo, all the code you write will be pushed here, all testing from projects and stages will be done by pulling from this repo.","title":"Task 1: Setting up your git account"},{"location":"git/git/#task_2_public_key_generation_via_command_line_linux","text":"You will need to generate a public and private key pair. The public key will need to be uploaded to your Gitea account. This will allow your local git to be automatically authenticated to your online git account. Open a terminal (in your VM, if used) and type the following commands: Generate key pair: ssh-keygen Add the key to the ssh-agent ssh-add ~/.ssh/id_rsa Display public key generated above: cat ~/.ssh/id_rsa.pub NOTE: press <enter> when asked for file location and pass-phrase. If you get asked if you want to overwrite the previous key, say 'yes'. You now need to link the public ssh key to your gitea account. Open gitea in your browser and navigate: Profile and Settings (Top Right Button) -> Settings -> SSH / GPG Keys -> Manage SSH Keys -> Add Key The url for the SSH settings should be https://csse3010-gitea.uqcloud.net/user/settings/keys Copy the contents of cat ~/.ssh/id_rsa.pub into the \"Content\" section. NOTE: For VirtualBox users, make sure \u201cclipboard, bidirectional\u201d is enabled, this will help you copy+paste things between your Host OS and VM.","title":"Task 2: Public Key Generation via Command Line (Linux)"},{"location":"git/git/#public_key_generation_for_windows","text":"Install putty Follow the steps on this guide","title":"Public Key Generation for Windows"},{"location":"git/git/#task_3_git_configuration","text":"You will need to initialize your git configuration and set up your global user name and user email. This is required to ensure that you can commit to your local repository. Open a terminal (in your VM, if used) and execute the following commands: git config --global user.name \"<MY.NAME>\" git config --global user.email MY.EMAIL@student.uq.edu.au NOTE: <MY.NAME> eg. \u201cjoe student\u201d. user.name is the name that will come up under your commit logs, user.email will link your git agent to your git-ea account.","title":"Task 3: Git Configuration"},{"location":"git/git/#task_4_cloning_sourcelib","text":"Execute the following commands: - Change into home directory: cd ~ - Create a folder called csse3010: mkdir csse3010 - Change into your csse3010 directory: cd ~/csse3010 - Clone the remote sourcelib repository into your csse3010 folder. This will automatically create a folder called sourcelib: git clone https://github.com/uqembeddedsys/sourcelib.git Figure 2: Git URL for cloning sourcelib","title":"Task 4: Cloning Sourcelib"},{"location":"git/git/#task_5_cloning_repo","text":"Navigate to 'repo' in gitea, select 'SSH', and copy the ssh url Figure 3: Git URL for cloning repo cd ~/csse3010 git clone <copied url> e.g. git@csse3010-gitea.zones.eait.uq.edu.au:12345678/repo.git There should now be 2 folders in ~/csse3010 , repo and sourcelib . You have now completed your local repository setup. You can now use git to commit your files. Note that committing files only stores files locally. It DOES NOT synchronise your local Git repository with your online repository. When using git, you can graphically see the current history by running gitg. NOTE: If you are working from home, you MUST be connected to the UQ VPN to be able to use git remotely, see the UQ VPN Guide NOTE: There WILL be updates to sourcelib throughout the semester, make sure you keep it up to date by cd ~/csse3010/sourcelib git fetch git pull , do this often. NOTE: there are two labels in your gitg window, a master branch and a origin/master branch. The master branch is on your local repository, and all branches prefixed with origin/ are on the remote server (CSSE3010 gitea). NOTE: You will only commit files to the repo repository.","title":"Task 5: Cloning Repo"},{"location":"git/git/#task_6_staging_and_pushing_files","text":"Under normal development, you can use git to stage files, and commit them to your repository. Make a commit now by updating the README.md file in your repo , if there is no README.md file, you can create one with touch README.md . Open the file with a text editor. e.g. code README.md , change the title to <Student#> 3010 Repo , e.g. 42345678 3010 Repo , save the file and close it. Open a terminal in the repo folder. git status git add README.md git commit -m\"updated README\" git push -u origin master Figure 4: git commit example Doing a git commit will create a commit in your local repository. Doing a git push will push the commit to your remote repository on gitea. You can do several git commits before doing a git push, if you so wish. Figure 5 shows the revised history after this commit. Figure 5: gitg commit history","title":"Task 6: Staging and Pushing Files"},{"location":"git/git/#summary_of_important_commands","text":"check curret repo status git status view history: gitg commit files: git add , git commit To get the latest changes from the online repository: git fetch , git pull To push all your local commits to the online repository: git push (or git push -u origin master if pushing for the first time to an empty remote repository) If you are recovering from a HDD failure, use the commands in the original guide git clone <URL>","title":"Summary of Important Commands"},{"location":"git/git/#other_tips","text":"Commit changes regularly. You will be required to put your changes into the online Gitea (AT LEAST) after each assessment, every session, including stage, project, etc.","title":"Other tips"},{"location":"git/git/#troubleshooting","text":"Error: \"Could not resolve hostname https://csse3010-gitea.uqcloud.net/ : No address associated with host\" This URL should have been copied directly from the gitea web interface. Typing this manually has the potential to cause typos to exist. This problem may be caused by your VM not being connected to the Internet. - Make sure your computer (the \u201chost\u201d) is connected to the Internet. - Make sure you are connected to UQ VPN - Reboot your VM. - ping 8.8.8.8 - make sure you are getting packets - ping github.com - make sure DNS works ( fix ) - ssh-add -l check the ssh-key is listed in the ssh-agent, also check the fingerprint of the key matches the fingerprint in gitea - If all else fails, prepend GIT_SSH_COMMAND=\"ssh -vv\" before the git command, e.g. GIT_SSH_COMMAND=\"ssh -vv\" git clone -v git@csse3010-gitea.zones.eait.uq.edu.au:41234567/repo.git , then paste the output in Ed. Error: Unable to do a git pull \"Your local changes to the following files would be overwritten by merge: Please, commit your changes or stash them before you can merge. Aborting\" Reset your git and completely overwrite your local changes - NOTE: ALL YOUR CHANGES WILL BE DELETED AND REPLACED BY THE ONLINE GIT FILES. Run the following commands: git reset HEAD --hard git pull Alternatively git stash git pull git stash pop <fix any merge conflicts> git commit","title":"Troubleshooting"},{"location":"hal/hal/","text":"","title":"Hal"},{"location":"setup/debug/debug/","text":"CSSE3010 Debug Guide This document details how to set up and use a debugging environment. Setting up gdb tools sudo apt-get install gdb-multiarch sudo ln -s /usr/bin/gdb-multiarch /usr/local/bin/arm-none-eabi-gdb Setting up vs-code Follow the setup instructions in the VSCode Settings section Go into the extensions section and search for Cortex-Debug, install it, then restart vs-code Creating launch.json go to your app make launch This will generate a launch.json file inside a folder called .vscode inside your CSSE3010 folder, this is needed for the debugger to work. You will need to run this every time you flash a new application onto your board. Section 4: Running the Debugger In vscode, press the Debug button on the left ribbon, at the top of the window, 2 configurations should become available, Debug Attach (Jlink) Debug Launch (JLink) Use Debug Attach to start a debug session on a currently running application and Debug Launch to restart the board and begin debugging. Then use standard debugging commands to go through your code, e.g. Continue, Step Over, Step Into, etc Click on the left of the line number to create breakpoints. Start by putting a break point somewhere in main.","title":"Debugger"},{"location":"setup/debug/debug/#csse3010_debug_guide","text":"This document details how to set up and use a debugging environment.","title":"CSSE3010 Debug Guide"},{"location":"setup/debug/debug/#setting_up_gdb_tools","text":"sudo apt-get install gdb-multiarch sudo ln -s /usr/bin/gdb-multiarch /usr/local/bin/arm-none-eabi-gdb","title":"Setting up gdb tools"},{"location":"setup/debug/debug/#setting_up_vs-code","text":"Follow the setup instructions in the VSCode Settings section Go into the extensions section and search for Cortex-Debug, install it, then restart vs-code","title":"Setting up vs-code"},{"location":"setup/debug/debug/#creating_launchjson","text":"go to your app make launch This will generate a launch.json file inside a folder called .vscode inside your CSSE3010 folder, this is needed for the debugger to work. You will need to run this every time you flash a new application onto your board.","title":"Creating launch.json"},{"location":"setup/debug/debug/#section_4_running_the_debugger","text":"In vscode, press the Debug button on the left ribbon, at the top of the window, 2 configurations should become available, Debug Attach (Jlink) Debug Launch (JLink) Use Debug Attach to start a debug session on a currently running application and Debug Launch to restart the board and begin debugging. Then use standard debugging commands to go through your code, e.g. Continue, Step Over, Step Into, etc Click on the left of the line number to create breakpoints. Start by putting a break point somewhere in main.","title":"Section 4: Running the Debugger"},{"location":"setup/linux/linux/","text":"Linux Setup Guide Overview Linux Installation - Install CSSE3010 source and tools directly on Ubuntu (Not using a VM). You can install the CSSE3010 source and toolchain onto Ubuntu, directly. NOTE: You must first have your git account setup BEFORE attempting this. Ubuntu Automatic Script installation The automatic script will download and install the required packages, add the sourcelib_env.sh script to your .profile startup script and add your user name to the \u201cdialout\u201d group. If you have not yet done so, clone the sourcelib repository into your csse3010 directory using git clone https://github.com/uqembeddedsys/sourcelib.git Go to the sourcelib/tools folder Run the script sourcelib_install.sh as root \u2013 i.e. sudo ./sourcelib_install.sh The script will download and install part of the toolchain Run source ~/.profile Type echo $SOURCELIB_ROOT into your terminal. This command should return a path variable, i.e ~/csse3010/sourcelib Test the compiler with arm-none-eabi-gcc --version Updating flashing tools The flashing tools used in this course rely on JLink libraries, JLink is used to communicate with the debugging chip on the board which will then flash the code (amongst doing other things).However the board dy default comes with a different debugging chip, ST-LINK, thus we will need to replace the ST-LINK firmware with JLink firmware. If you are an internal student, this may have already been done for you, and you can try skipping to the next section, external students should read on. Do the following steps on a Windows machine (Non-VM). Download and install the ST-LINK USB Drivers for Windows ST-LINK Download and install the latest Windows JLink-Firmware Download the ST-Link Reflash Utility from Segger Run the reflasher -> accept -> [1] Upgrade To J-Link -> [0] Quit Verifying JLink Inside your VM, make sure the nucleo is plugged in, and attached as a device, verify by using sudo dmesg and looking at the bottom of the log for newly attached devices, as well as looking for /dev/ttyACM0 when the usb is pluged in and the device is attached to the VM. (Note the nucleo cannot be attached both to the VM and to the Host OS, so if its visible in your Host OS, it isnt attached to your VM) *Figure 1: USB Port you will use Execute the following JLinkExe connect STM32F429ZI (or other depending on your nucleo) S <Enter> (Default) There should be some text ending with Cortex-M4 Identified q (for quit) NOTE: The USB port pictured above should be the only USB port you will need in this course","title":"Linux Setup Installation"},{"location":"setup/linux/linux/#linux_setup_guide","text":"","title":"Linux Setup Guide"},{"location":"setup/linux/linux/#overview","text":"Linux Installation - Install CSSE3010 source and tools directly on Ubuntu (Not using a VM). You can install the CSSE3010 source and toolchain onto Ubuntu, directly. NOTE: You must first have your git account setup BEFORE attempting this.","title":"Overview"},{"location":"setup/linux/linux/#ubuntu_automatic_script_installation","text":"The automatic script will download and install the required packages, add the sourcelib_env.sh script to your .profile startup script and add your user name to the \u201cdialout\u201d group. If you have not yet done so, clone the sourcelib repository into your csse3010 directory using git clone https://github.com/uqembeddedsys/sourcelib.git Go to the sourcelib/tools folder Run the script sourcelib_install.sh as root \u2013 i.e. sudo ./sourcelib_install.sh The script will download and install part of the toolchain Run source ~/.profile Type echo $SOURCELIB_ROOT into your terminal. This command should return a path variable, i.e ~/csse3010/sourcelib Test the compiler with arm-none-eabi-gcc --version","title":"Ubuntu Automatic Script installation"},{"location":"setup/linux/linux/#updating_flashing_tools","text":"The flashing tools used in this course rely on JLink libraries, JLink is used to communicate with the debugging chip on the board which will then flash the code (amongst doing other things).However the board dy default comes with a different debugging chip, ST-LINK, thus we will need to replace the ST-LINK firmware with JLink firmware. If you are an internal student, this may have already been done for you, and you can try skipping to the next section, external students should read on. Do the following steps on a Windows machine (Non-VM). Download and install the ST-LINK USB Drivers for Windows ST-LINK Download and install the latest Windows JLink-Firmware Download the ST-Link Reflash Utility from Segger Run the reflasher -> accept -> [1] Upgrade To J-Link -> [0] Quit","title":"Updating flashing tools"},{"location":"setup/linux/linux/#verifying_jlink","text":"Inside your VM, make sure the nucleo is plugged in, and attached as a device, verify by using sudo dmesg and looking at the bottom of the log for newly attached devices, as well as looking for /dev/ttyACM0 when the usb is pluged in and the device is attached to the VM. (Note the nucleo cannot be attached both to the VM and to the Host OS, so if its visible in your Host OS, it isnt attached to your VM) *Figure 1: USB Port you will use Execute the following JLinkExe connect STM32F429ZI (or other depending on your nucleo) S <Enter> (Default) There should be some text ending with Cortex-M4 Identified q (for quit) NOTE: The USB port pictured above should be the only USB port you will need in this course","title":"Verifying JLink"},{"location":"setup/tips/tips/","text":"","title":"Tips"},{"location":"setup/virtual_machine/virtual_machine/","text":"Virtual Machine Setup Guide CSSE3010 Linux Virtual Machine (VM) Requirements Install CSSE3010 VM on VMware Player Pro (Windows) Install CSSE3010 VM on VirtualBox (OSX or Windows) Linux Virtual Machine Requirements You will require at least 16GB of hard-disk space, to install the VM. The Following Virtual Machines are recommended or the following operating systems: Windows: VMWare Player (preferred) or Virtual Box (alternate) OSX: Virtual Box or VMWare Fusion Virtual Box Installation: (Windows, OSX and Linux) Download the Virtual Box installer and VM disk image file (.ova). Copy both to your hard drive. Step 1 Install virtual box and open, when installeed Step 2 Select and drag the VM .ova file into the virtual box manager. This will create a new CSSE3010 VM. Step 3 Double click the CSSE3010 VM icon, to start the CSSE3010 VM. This should take you to the desktop, as seen below. Step 4 Your Virtual Machine should now boot to the deskotp. VMware Workstation Player Installation: (Windows only) Download the VMWare workshop player installer and VM disk image file (.ova). You can choose to download the latest VMware workshop player/ Install VMWare workshop player on your laptop. Step 1 Use the \"Open a Vritual Machine\" link and select the CSSE3010VMxx.ova file. Step 2 Follow the prompts, to install the CSSE3010 VM. Set CSSE3010 to the VM name. Select ok, when encoutering warnings. Step 3 When finished installing, double click the CSSE3010 link on the VMware workstation player, to boot the CSSE3010 VM. Step 4 Your Virtual Machine should now boot to the deskotp.","title":"Virtual Machine"},{"location":"setup/virtual_machine/virtual_machine/#virtual_machine_setup_guide","text":"CSSE3010 Linux Virtual Machine (VM) Requirements Install CSSE3010 VM on VMware Player Pro (Windows) Install CSSE3010 VM on VirtualBox (OSX or Windows)","title":"Virtual Machine Setup Guide"},{"location":"setup/virtual_machine/virtual_machine/#linux_virtual_machine_requirements","text":"You will require at least 16GB of hard-disk space, to install the VM. The Following Virtual Machines are recommended or the following operating systems: Windows: VMWare Player (preferred) or Virtual Box (alternate) OSX: Virtual Box or VMWare Fusion","title":"Linux Virtual Machine Requirements"},{"location":"setup/virtual_machine/virtual_machine/#virtual_box_installation_windows_osx_and_linux","text":"Download the Virtual Box installer and VM disk image file (.ova). Copy both to your hard drive.","title":"Virtual Box Installation: (Windows, OSX and Linux)"},{"location":"setup/virtual_machine/virtual_machine/#step_1","text":"Install virtual box and open, when installeed","title":"Step 1"},{"location":"setup/virtual_machine/virtual_machine/#step_2","text":"Select and drag the VM .ova file into the virtual box manager. This will create a new CSSE3010 VM.","title":"Step 2"},{"location":"setup/virtual_machine/virtual_machine/#step_3","text":"Double click the CSSE3010 VM icon, to start the CSSE3010 VM. This should take you to the desktop, as seen below.","title":"Step 3"},{"location":"setup/virtual_machine/virtual_machine/#step_4","text":"Your Virtual Machine should now boot to the deskotp.","title":"Step 4"},{"location":"setup/virtual_machine/virtual_machine/#vmware_workstation_player_installation_windows_only","text":"Download the VMWare workshop player installer and VM disk image file (.ova). You can choose to download the latest VMware workshop player/ Install VMWare workshop player on your laptop.","title":"VMware Workstation Player Installation: (Windows only)"},{"location":"setup/virtual_machine/virtual_machine/#step_5","text":"Use the \"Open a Vritual Machine\" link and select the CSSE3010VMxx.ova file.","title":"Step 1"},{"location":"setup/virtual_machine/virtual_machine/#step_6","text":"Follow the prompts, to install the CSSE3010 VM. Set CSSE3010 to the VM name. Select ok, when encoutering warnings.","title":"Step 2"},{"location":"setup/virtual_machine/virtual_machine/#step_7","text":"When finished installing, double click the CSSE3010 link on the VMware workstation player, to boot the CSSE3010 VM.","title":"Step 3"},{"location":"setup/virtual_machine/virtual_machine/#step_8","text":"Your Virtual Machine should now boot to the deskotp.","title":"Step 4"},{"location":"setup/vsworkspace/vsworkspace/","text":"Setting up vs-code Create a workspace In vs-code go to File -> Open Folder and select the CSSE3010 folder. The folder should be visible in the Explorer section of vs-code. It should have 2 sub-folders, sourcelib and repo. File -> Save Workspace As -> name the workspace. e.g. csse3010.code-workspace Now, whenever you open up vscode, open this workspace file to resume where you left off. File -> Open Workspace from file Using workspaces will greatly help you nagivate between different files in your code as well as sourcelib. Install the C/C++ extension You will need this for IntelliSense (autocompletion) and browsing your code. Go to the extensions tab, search for C/C++ and install it. Restart vscode. Create workspace settings Navigate to any makefile in sourcelib make vscode In vscode, under explorer, click the refresh explorer button, a new folder should appear under the root folder called .vscode. This folder contains a settings file that modifies some vscode behaviour as well as a properties file which contains the folders where your code should look for includes and files.","title":"VSCode Settings"},{"location":"setup/vsworkspace/vsworkspace/#setting_up_vs-code","text":"","title":"Setting up vs-code"},{"location":"setup/vsworkspace/vsworkspace/#create_a_workspace","text":"In vs-code go to File -> Open Folder and select the CSSE3010 folder. The folder should be visible in the Explorer section of vs-code. It should have 2 sub-folders, sourcelib and repo. File -> Save Workspace As -> name the workspace. e.g. csse3010.code-workspace Now, whenever you open up vscode, open this workspace file to resume where you left off. File -> Open Workspace from file Using workspaces will greatly help you nagivate between different files in your code as well as sourcelib.","title":"Create a workspace"},{"location":"setup/vsworkspace/vsworkspace/#install_the_cc_extension","text":"You will need this for IntelliSense (autocompletion) and browsing your code. Go to the extensions tab, search for C/C++ and install it. Restart vscode.","title":"Install the C/C++ extension"},{"location":"setup/vsworkspace/vsworkspace/#create_workspace_settings","text":"Navigate to any makefile in sourcelib make vscode In vscode, under explorer, click the refresh explorer button, a new folder should appear under the root folder called .vscode. This folder contains a settings file that modifies some vscode behaviour as well as a properties file which contains the folders where your code should look for includes and files.","title":"Create workspace settings"},{"location":"setup/windows/windows/","text":"","title":"Windows"},{"location":"workbook/workbook/","text":"Workbook Guide Workbook Overview The workbook is an important tool in engineering development. It must be used to record key facts, features and outcomes of a project. Workbooks are also seen as legal documents that can be used as evidence, e.g. patent applications. The workbook must be used to record how you design, implement and test your stages/projects. The workbook consists of the following sections for a each stage/project: Stage Worksheet (printout must be fully pasted into workbook). Printouts must be cut down to size and NOT folded or half pasted into the workbook. Stage/Project Criteria (printout pasted into workbook) Stage/Project Objectives (MUST BE DATED) Hardware Schematic Diagram sheets using the Hardware Schematic Template Program Flow Charts using the Flow Chart Template Operating State Diagrams (if required) using the State Diagram Template Testing Procedure Results and Conclusions Workbook Format and Use The workbook must be an A4 sized closed bound book, not spiral bound. Spiral bound books are NOT accepted. The workbook must only be used for the stages and projects. It MUST not be used for other purposes. Figure 1: Acceptable and Not Acceptable Workbooks Stage Worksheet and Criteria The stage worksheet must be printed and pasted into your workbook. The criteria must also be printed and pasted into your workbook (from stage worksheet). The criteria is used to record your marks for the stage. Objectives State the objectives of the stage/project. You should clearly state in one to five points what the end deliverables of the stage/project are. This should be derived from the stage/project description and tasks. This section must be dated. Templates Schematic Flowcharts State Diagrams Testing Your design must be tested to show it meets the objectives of the stage/project. This can be done by applying certain test patterns, e.g. Hamming sequences or using an instrument (Logic Analyser) to view an output. You should briefly outline how you will test your design and what tools you will use. Results and Conclusions You must state if your design was successful or not. You should also outline if there were any significant outcomes, problems or new facts that you need to be aware of.","title":"Workbook Guide"},{"location":"workbook/workbook/#workbook_guide","text":"","title":"Workbook Guide"},{"location":"workbook/workbook/#workbook_overview","text":"The workbook is an important tool in engineering development. It must be used to record key facts, features and outcomes of a project. Workbooks are also seen as legal documents that can be used as evidence, e.g. patent applications. The workbook must be used to record how you design, implement and test your stages/projects. The workbook consists of the following sections for a each stage/project: Stage Worksheet (printout must be fully pasted into workbook). Printouts must be cut down to size and NOT folded or half pasted into the workbook. Stage/Project Criteria (printout pasted into workbook) Stage/Project Objectives (MUST BE DATED) Hardware Schematic Diagram sheets using the Hardware Schematic Template Program Flow Charts using the Flow Chart Template Operating State Diagrams (if required) using the State Diagram Template Testing Procedure Results and Conclusions","title":"Workbook Overview"},{"location":"workbook/workbook/#workbook_format_and_use","text":"The workbook must be an A4 sized closed bound book, not spiral bound. Spiral bound books are NOT accepted. The workbook must only be used for the stages and projects. It MUST not be used for other purposes. Figure 1: Acceptable and Not Acceptable Workbooks","title":"Workbook Format and Use"},{"location":"workbook/workbook/#stage_worksheet_and_criteria","text":"The stage worksheet must be printed and pasted into your workbook. The criteria must also be printed and pasted into your workbook (from stage worksheet). The criteria is used to record your marks for the stage.","title":"Stage Worksheet and Criteria"},{"location":"workbook/workbook/#objectives","text":"State the objectives of the stage/project. You should clearly state in one to five points what the end deliverables of the stage/project are. This should be derived from the stage/project description and tasks. This section must be dated.","title":"Objectives"},{"location":"workbook/workbook/#templates","text":"Schematic Flowcharts State Diagrams","title":"Templates"},{"location":"workbook/workbook/#testing","text":"Your design must be tested to show it meets the objectives of the stage/project. This can be done by applying certain test patterns, e.g. Hamming sequences or using an instrument (Logic Analyser) to view an output. You should briefly outline how you will test your design and what tools you will use.","title":"Testing"},{"location":"workbook/workbook/#results_and_conclusions","text":"You must state if your design was successful or not. You should also outline if there were any significant outcomes, problems or new facts that you need to be aware of.","title":"Results and Conclusions"},{"location":"workbook/flowcharts/flowcharts/","text":"Flow Charts Flow charts show how the program's firmware is implemented. Multiple flow charts should be used to show how the firmware operates. Typically, a flow chart is drawn for each function created in the program. A single large flow chart is not acceptable. Each function should have a separate flow chart, e.g. \\texttt{main()}. An Interrupt Service Routine (ISR) should be drawn as a normal flow chart but must have an \"lightning\" symbol \\text{\\faBolt}, at the end of the start block, to show that the ISR can occur anytime.\\ The flow chart diagram sheet is used to show the flow charts used in your stage/project. Each flow chart diagram sheet must be pasted into your workbook. Each program implemented should have at least one flow chart diagram sheet. Note a program can consist (and often do) of more than one flow chart. Each flow chart diagram sheet must have a unique ID (FID) that consists of the stage number and a unique ID for the program - e.g. F3-1 is function 1 from Stage 3. If flow charts need to be segmented, then the flow chart FID must be used to reference the corresponding flow chart. \\ Refer to the Miller Flowchart guide on Blackboard for the required symbols. mylib For mylib components - the mylib sheet will specify which ID prefix to use e.g. joystick mylib HAL flow chart ID starts with JH-1. Each mylib component should consist of at least one flow chart. If flow charts need to be segmented, then the flow chart ID must be used to reference the corresponding flow chart. Figure 1: Flowchart Example [Miller] Segmentation Flow charts should at most take up one page. It is not acceptable for a flow chart to go over a page. Any flow chart taking up more than one page should be segmented into smaller flow charts. You can then combine them to construct a higher-level flow chart by referencing their IDs.","title":"Flow Charts"},{"location":"workbook/flowcharts/flowcharts/#flow_charts","text":"Flow charts show how the program's firmware is implemented. Multiple flow charts should be used to show how the firmware operates. Typically, a flow chart is drawn for each function created in the program. A single large flow chart is not acceptable. Each function should have a separate flow chart, e.g. \\texttt{main()}. An Interrupt Service Routine (ISR) should be drawn as a normal flow chart but must have an \"lightning\" symbol \\text{\\faBolt}, at the end of the start block, to show that the ISR can occur anytime.\\ The flow chart diagram sheet is used to show the flow charts used in your stage/project. Each flow chart diagram sheet must be pasted into your workbook. Each program implemented should have at least one flow chart diagram sheet. Note a program can consist (and often do) of more than one flow chart. Each flow chart diagram sheet must have a unique ID (FID) that consists of the stage number and a unique ID for the program - e.g. F3-1 is function 1 from Stage 3. If flow charts need to be segmented, then the flow chart FID must be used to reference the corresponding flow chart. \\ Refer to the Miller Flowchart guide on Blackboard for the required symbols.","title":"Flow Charts"},{"location":"workbook/flowcharts/flowcharts/#mylib","text":"For mylib components - the mylib sheet will specify which ID prefix to use e.g. joystick mylib HAL flow chart ID starts with JH-1. Each mylib component should consist of at least one flow chart. If flow charts need to be segmented, then the flow chart ID must be used to reference the corresponding flow chart. Figure 1: Flowchart Example [Miller]","title":"mylib"},{"location":"workbook/flowcharts/flowcharts/#segmentation","text":"Flow charts should at most take up one page. It is not acceptable for a flow chart to go over a page. Any flow chart taking up more than one page should be segmented into smaller flow charts. You can then combine them to construct a higher-level flow chart by referencing their IDs.","title":"Segmentation"},{"location":"workbook/schematic/schematic/","text":"Hardware Schematics Hardware schematics are meant to show how you would physically implement the stage/project design. Each hardware schematic diagram sheet must be pasted into your workbook. Each hardware schematic diagram sheet must have a unique ID (HID) that consists of the stage number and a unique ID for the hardware schematic - e.g. H1-2 is hardware schematic 2 from stage 1. The HID must be used when referring to the corresponding hardware schematic in your other hardware schematic diagram sheets. The hardware schematic should clearly show the inputs and outputs to the embedded platform and the peripherals in use. Wires or signals are represented as a single lines. A BUS is a collection of wires that all starts at the same peripheral and then all terminates at the same peripheral. Where possible use a double line to represent a Bus. Figure 1: Hardware Schematic Bus Example Each wire or bus must have the start and end terminals labeled, e.g. what pins are connected. You must draw peripherals with standard logic symbols and each peripheral must be labeled. The schematic must be legible and neatly drawn. Figure 2: Hardware Schematic Example Logic Symbols IEEE distinctive logic symbols (e.g. NOT, AND, OR, etc) must be used when drawing a block diagram. If there is no distinctive symbol used, then a rectangular symbol can be used.Refer to the IEEE Standard Symbols PDF on Blackboard. Segmentation Each hardware schematic should take up a single page. If a large design takes up more than one page, you must segment your design into separate hardware schematic blocks with unique HIDs, then combine them together in an overview schematic diagram. The overview hardware schematic shows each hardware schematic as a block (with HID). There should not be wires crossing pages.\\","title":"Hardware Schematics"},{"location":"workbook/schematic/schematic/#hardware_schematics","text":"Hardware schematics are meant to show how you would physically implement the stage/project design. Each hardware schematic diagram sheet must be pasted into your workbook. Each hardware schematic diagram sheet must have a unique ID (HID) that consists of the stage number and a unique ID for the hardware schematic - e.g. H1-2 is hardware schematic 2 from stage 1. The HID must be used when referring to the corresponding hardware schematic in your other hardware schematic diagram sheets. The hardware schematic should clearly show the inputs and outputs to the embedded platform and the peripherals in use. Wires or signals are represented as a single lines. A BUS is a collection of wires that all starts at the same peripheral and then all terminates at the same peripheral. Where possible use a double line to represent a Bus. Figure 1: Hardware Schematic Bus Example Each wire or bus must have the start and end terminals labeled, e.g. what pins are connected. You must draw peripherals with standard logic symbols and each peripheral must be labeled. The schematic must be legible and neatly drawn. Figure 2: Hardware Schematic Example","title":"Hardware Schematics"},{"location":"workbook/schematic/schematic/#logic_symbols","text":"IEEE distinctive logic symbols (e.g. NOT, AND, OR, etc) must be used when drawing a block diagram. If there is no distinctive symbol used, then a rectangular symbol can be used.Refer to the IEEE Standard Symbols PDF on Blackboard.","title":"Logic Symbols"},{"location":"workbook/schematic/schematic/#segmentation","text":"Each hardware schematic should take up a single page. If a large design takes up more than one page, you must segment your design into separate hardware schematic blocks with unique HIDs, then combine them together in an overview schematic diagram. The overview hardware schematic shows each hardware schematic as a block (with HID). There should not be wires crossing pages.\\","title":"Segmentation"},{"location":"workbook/state_diagram/state_diagram/","text":"State Diagrams State diagrams show the modes of operation of your program (or firmware). The firmware may enter different modes or stages of operation, e.g. reading the joystick or displaying the LED-Bar pattern. State diagrams are used to describe cyclic executives, such as the \\texttt{main()} function or an RTOS task/thread. Figure 1: State Diagram Example","title":"State Diagrams"},{"location":"workbook/state_diagram/state_diagram/#state_diagrams","text":"State diagrams show the modes of operation of your program (or firmware). The firmware may enter different modes or stages of operation, e.g. reading the joystick or displaying the LED-Bar pattern. State diagrams are used to describe cyclic executives, such as the \\texttt{main()} function or an RTOS task/thread. Figure 1: State Diagram Example","title":"State Diagrams"}]}